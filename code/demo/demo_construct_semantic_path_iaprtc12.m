clear 
clear all
base_path = 'code';
chdir(base_path)
addpath(genpath(pwd))

data_name = 'iaprtc12';

%------------------------------------- load the semantic_hierarchy_structure
load([data_name, '_semantic_hierarchy_structure.mat']); % semantic_hierarchy_structure
num_class = numel(semantic_hierarchy_structure.class_name);

% the following three should be constructed for new data, such as IAPRTC-12
same_meaning_pair = semantic_hierarchy_structure.same_meaning_pair; 
ancestor_cell = semantic_hierarchy_structure.ancestor_cell;
descendant_cell = semantic_hierarchy_structure.descendant_cell;

%-------------------------------------------------------------------------- 
% construct the semantic path based on the semantic hierarchy graph, and same_meaning_pair
semantic_path_cell = {
        [268 180 181], ... % 180 people -- 181 person
        [159 1 180 181], ...
        [289 1 180 181], ...
        [31 180 181], ...
        [49 141 180 181], ... % 49 child -- 141 kid
        [74 180 181], ...
        [107 180 181], ...
        [139 180 181], ...
        [189 180 181], ...
        [244 180 181], ...
        [257 180 181], ...
        [40 278 99], ...
        [205 278 99], ...
        [163 99], ...
        [76 83 220], ...
        [76 83 210 99], ...
        [76 117], ...
        [224 210 99], ...
        [25 95 187], ... % 25 bloom -- 95 flower
        [3 90], ...
        [147 90], ...
        [147 111 187], ...
        [261 117], ...
        [10 117], ...
        [66 117], ...
        [276 117], ...
        [276 111 187], ...
        [160 117], ...
        [160 111 187], ...
        [140 98 279 117], ...
        [140 98 279 187], ...
        [103 187], ...
        [207 187], ...
        [37 232 187], ... % 37 bush -- 232 shrub
        [172 273 187], ...
        [275 273 187], ...
        [38 187], ...
        [89 187], ...
        [58 14 230 187], ... % 14 beach -- 230 shore
        [85 128 99], ...
        [120 128 99], ...
        [110 117], ...
        [110 222 243 5], ...
        [52 215 5], ...
        [67 215 5], ...
        [11 215 5], ...
        [46 215 5], ...
        [46 233], ...
        [19 222 243 5], ...
        [48 222 243 5], ...
        [64 222 243 5], ...
        [265 5], ...
        [47 161 5], ... % 47 centre -- 161 middle
        [62 5], ...
        [68 5], ...
        [17 15], ...
        [17 233], ...
        [6 233], ...
        [102 233], ...
        [94 215 5], ...
        [94 150], ...
        [75 150], ...
        [254 247 150], ...
        [24 55], ...
        [42 55], ...
        [72 55], ...
        [135 55], ...
        [242 55], ...
        [260 55], ...
        [269 55], ...
        [173 274 56], ... % 173 pant -- 274 trousers
        [262 227 56], ...
        [137 227 56], ...
        [4 134 56], ...
        [235 56], ...
        [198 258 56], ...
        [277 56], ...
        [282 56], ...
        [7 8], ...
        [13 284], ...
        [69 284], ...
        [91 284], ...
        [100 284], ...
        [142 143 284], ...
        [192 284], ...
        [193 284], ...
        [211 284], ...
        [221 284], ...
        [285 284], ...
        [61 22], ...
        [179 22], ...
        [236 29 28], ...
        [87 28], ...
        [118 28], ...
        [121 28], ...
        [124 28], ...
        [149 28], ...
        [164 28], ...
        [165 28], ...
        [45 50 35], ...
        [131 35], ...
        [209 35], ...
        [214 35], ...
        [218 35], ...
        [239 35], ...
        [288 283 35], ...
        [288 101], ...
        [201 101], ...
        [136 43], ...
        [57 237], ...
        [238 237], ...
        [256 255 237], ...
        [59 251], ...
        [119 63], ...
        [77 259], ...
        [81 86], ...
        [84 153], ...
        [129 153], ...
        [97 175 153], ...
        [176 175 153], ...
        [271 175 153], ...
        [202 153], ...
        [216 153], ...
        [125 88], ...
        [92 170], ...
        [253 170], ...
        [113 213 251], ... % 213 rock -- 251 stone
        [133 116], ...
        [122 194], ...
        [126 188], ...
        [127 212], ...
        [252 212], ...
        [132 225], ...
        [264 225], ...
        [195 183], ...
        [185 270], ... % the following are same meaning pair
        [2 186], ...
        [20 21], ...
        }';
num_semantic_path = numel(semantic_path_cell);
index_of_same_meaning_pair_in_path = 137:138; 

% construct the layer of each node in each path
% the bottom node is layer 0, and its parent is layer 1
node_layer_of_each_path = { ...
    [0 1 1], ...
    [0 1 2 2], ...
    [0 1 2 2], ...
    [0 1 1], ...
    [0 0 1 1], ...
    [0 1 1], ...
    [0 1 1], ...
    [0 1 1], ...
    [0 1 1], ...
    [0 1 1], ...
    [0 1 1], ...
    [0 1 2], ...
    [0 1 2], ...
    [0 1], ...
    [0 1 2], ...
    [0 1 2 3], ...
    [0 1], ...
    [0 1 2], ...
    [0 0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1 2], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1 2], ...
    [0 1], ...
    [0 1 2], ...
    [0 1 2 3], ...
    [0 1 2 3], ...
    [0 1], ...
    [0 1], ...
    [0 0 1], ...
    [0 1 2], ...
    [0 1 2], ...
    [0 1], ...
    [0 1], ...
    [0 1 1 2], ...
    [0 1 2], ...
    [0 1 2], ...
    [0 1], ...
    [0 1 2 3], ...
    [0 1 2], ...
    [0 1 2], ...
    [0 1 2], ...
    [0 1 2], ...
    [0 1], ...
    [0 1 2 3], ...
    [0 1 2 3], ...
    [0 1 2 3], ...
    [0 1], ...
    [0 0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1 2], ...
    [0 1], ...
    [0 1], ...
    [0 1 2], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 0 1], ...
    [0 1 2], ...
    [0 1 2], ...
    [0 1 2], ...
    [0 1], ...
    [0 1 2], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1 2], ...
    [0 1 2], ...
    [0 1 2], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1 ], ...
    [0 1], ...
    [0 1 2], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1 2], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1 2], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1 2], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1 2], ...
    [0 1 2], ...
    [0 1 2], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1 1], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1], ...
    [0 1 1], ...
    [0 0], ...
    [0 0], ...
}';
 
%% weight of each path
num_child_of_each_class = arrayfun(@(i) numel(descendant_cell{i}), 1:num_class); 
weight_decreasing_factor_between_layer = 0.7; 
weight_of_path_cell = cell(num_semantic_path, 1);
for i = 1:num_semantic_path
    path_i = semantic_path_cell{i};
    layer_i = node_layer_of_each_path{i};
    temp_weight_i = zeros(1, numel(path_i));
    for j = 1:numel(path_i)
        cj = path_i(j); 
        layer_cj = layer_i(j);
        num_child_of_cj = num_child_of_each_class(cj); 
        if layer_cj == 0
            temp_weight_i(j) = 1;
        else
            temp_weight_i(j) = (1/num_child_of_cj) * ...
                (weight_decreasing_factor_between_layer)^(layer_cj); 
        end
    end
    weight_of_path_cell{i} = temp_weight_i; 
end

% compute the weight of each class based on the semantic path cell 
% weight_of_ci = sum of the weight of ci in all semantic paths
weight_of_each_class_based_on_path = zeros(num_class, 1);
for i = 1:num_semantic_path
   path_i = semantic_path_cell{i};
   weight_of_path_i = weight_of_path_cell{i}; 
   for j = 1:numel(path_i)
      cj = path_i(j);
      weight_of_each_class_based_on_path(cj) = ...
          weight_of_each_class_based_on_path(cj) + weight_of_path_i(j); 
   end
end
weight_of_each_class_based_on_path(weight_of_each_class_based_on_path==0) = 1; 

%% summarization and save
semantic_path_structure = struct('data_name', data_name, ...
    'num_paths', num_semantic_path, ...
    'index_of_same_meaning_pair_in_path', index_of_same_meaning_pair_in_path, ...
    'semantic_path_cell', {semantic_path_cell}, ...
    'weight_of_path_cell', {weight_of_path_cell}, ...
    'weight_of_each_class', weight_of_each_class_based_on_path, ...
    'weight_decreasing_factor_between_layer', weight_decreasing_factor_between_layer, ...
    'node_layer_of_each_path', {node_layer_of_each_path'}); 

save_path = fullfile(base_path, 'data', data_name); 
save(fullfile(save_path, [data_name, '_semantic_path_structure']), 'semantic_path_structure'); 

SH_and_SP_structure = struct('data_name', data_name, ...
    'semantic_hierarchy', semantic_hierarchy_structure, ...
    'semantic_path', semantic_path_structure);
save(fullfile(save_path, [data_name, '_SH_and_SP_structure']), 'SH_and_SP_structure'); 


%--------------------------------------------------------------------------
% construct the the semantic path and weight of each training 
% and testing image, according their ground-truth label subset and
% the weighted semantic paths of all candicate classes
%--------------------------------------------------------------------------

label_train_full = semantic_hierarchy_structure.label_train_SH_augmented;
num_sample_train = size(label_train_full, 2);

%---- construct semantic path of the positive labels of each training image
index_of_null_sample = find(sum(label_train_full==1, 1)==0); % 9628 and 16308
semantic_path_and_weight_cell_train = struct( ...
                  'path', repmat({[]}, 1, num_sample_train), ...
                  'weight', repmat({[]}, 1, num_sample_train));
              
tic
for i = 1: num_sample_train
    subset_i = find(label_train_full(:, i)==1); 
    if ~isempty(subset_i)
        [path_cell_i, weight_cell_i] = find_path_and_weight_of_subset( ...
                 subset_i, SH_and_SP_structure);
        semantic_path_and_weight_cell_train(i).path = path_cell_i; 
        semantic_path_and_weight_cell_train(i).weight = weight_cell_i;
    else
        semantic_path_and_weight_cell_train(i).path = [];
        semantic_path_and_weight_cell_train(i).weight = [];
    end
end
toc


%----- construct semantic path of the positive labels of each testing image
label_test_full = full(semantic_hierarchy_structure.label_test_SH_augmented);
num_sample_test = size(label_test_full, 2);
semantic_path_and_weight_cell_test = struct( ...
                  'path', repmat({[]}, 1, num_sample_test), ...
                  'weight', repmat({[]}, 1, num_sample_test));
tic
for i = 1: num_sample_test
    subset_i = find(label_test_full(:, i)==1); 
    if ~isempty(subset_i)
        [path_cell_i, weight_cell_i] = find_path_and_weight_of_subset( ...
                 subset_i, SH_and_SP_structure);
        semantic_path_and_weight_cell_test(i).path = path_cell_i; 
        semantic_path_and_weight_cell_test(i).weight = weight_cell_i; 
    else
        semantic_path_and_weight_cell_test(i).path = [];
        semantic_path_and_weight_cell_test(i).weight = [];
    end
end
toc

semantic_path_and_weight_cell = struct( ...
                        'train', semantic_path_and_weight_cell_train, ...
                        'test', semantic_path_and_weight_cell_test, ...
                        'index_of_null_sample_in_train', index_of_null_sample);

save_path = fullfile(base_path, 'data', data_name); 
save_name = fullfile(save_path, [data_name, '_semantic_path_and_weight_cell_train_test.mat']);
save(save_name, 'semantic_path_and_weight_cell');

